<%- include('../partials/head', { title, description, request }) %>
<%- include('../partials/header') %>
<section class="py-5 py-lg-6">
  <div class="container" style="max-width: 820px;">
    <style>
      .contract-preview {
        background-color: #ffffff;
        border: 1px solid rgba(0, 0, 0, 0.08);
        border-radius: 1rem;
        padding: 2rem;
        overflow-x: auto;
      }
      .contract-document h1 {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
      }
      .contract-document__body h2 {
        font-size: 1.05rem;
        margin-top: 1.5rem;
        margin-bottom: 0.5rem;
      }
      .contract-document__body p,
      .contract-document__body li {
        font-size: 0.95rem;
        line-height: 1.6;
      }
      .contract-document__signatures {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        margin-top: 2rem;
      }
      @media (min-width: 768px) {
        .contract-document__signatures {
          flex-direction: row;
          justify-content: space-between;
        }
      }
      .signature-block {
        flex: 1;
      }
      .signature-box {
        border: 1px dashed #6c757d;
        border-radius: 0.75rem;
        min-height: 120px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
        padding: 0.75rem;
      }
      .signature-placeholder {
        color: #6c757d;
        letter-spacing: 0.1em;
      }
      .signature-image {
        max-width: 100%;
        max-height: 110px;
        object-fit: contain;
      }
      .signature-pad-wrapper {
        border: 1px dashed rgba(0, 0, 0, 0.2);
        border-radius: 1rem;
        background: #ffffff;
        padding: 1rem;
      }
      .signature-pad-wrapper canvas {
        width: 100%;
        height: 180px;
        touch-action: none;
        display: block;
      }
    </style>
    <% const isMergedTicket = Boolean(ticket.merged_into_ticket_id); %>
    <% const statusLabel = ticket.status === 'rezolvat' && isMergedTicket ? 'rezolvat (merged)' : ticket.status; %>
    <div class="glass-card mb-4">
      <h1 class="h4 mb-3"><%= ticket.subject %></h1>
      <p class="text-muted small mb-2">Cod ticket: <strong><%= ticket.display_code %></strong></p>
      <p class="text-muted">Status: <span class="badge text-bg-info text-dark text-uppercase"><%= statusLabel %></span></p>
      <% if (ticket.project_title) { %>
      <p class="mb-0">Proiect: <strong><%= ticket.project_title %></strong></p>
      <% } %>
      <% if (isMergedTicket) { %>
      <div class="alert alert-warning mt-3 mb-0" role="alert">
        Acest ticket a fost fuzionat in
        <a class="alert-link" href="/cont/tichete/<%= ticket.merged_into_ticket_id %>">
          ticketul #<%= ticket.merged_into_display_code || ticket.merged_into_ticket_id %>
        </a>.
      </div>
      <% } %>
    </div>

    <% if (feedback && feedback.success) { %>
    <div class="alert alert-success"><%= feedback.success %></div>
    <% } %>
    <% if (feedback && feedback.error) { %>
    <div class="alert alert-danger"><%= feedback.error %></div>
    <% } %>

    <% if (offer) { %>
    <% const offerExpires = offer.expires_at
      ? (offer.expires_at.toISOString ? offer.expires_at.toISOString().replace('T', ' ').slice(0, 16) : offer.expires_at)
      : 'N/A'; %>
    <% const counterExpires = offer.counter_expires_at
      ? (offer.counter_expires_at.toISOString
          ? offer.counter_expires_at.toISOString().replace('T', ' ').slice(0, 16)
          : offer.counter_expires_at)
      : null; %>
    <% const offerStatusLabels = {
      pending: 'In pregatire',
      sent: 'Trimisa',
      accepted: 'Acceptata',
      refused: 'Refuzata',
      expired: 'Expirata',
      counter_pending: 'Contraoferta in asteptare',
      counter_submitted: 'Contraoferta trimisa'
    }; %>
    <div class="glass-card mb-4">
      <h2 class="h5 mb-3">Oferta personalizata</h2>
      <div class="d-flex flex-wrap gap-3 align-items-center mb-3">
        <span class="badge bg-primary text-uppercase"><%= offerStatusLabels[offer.status] || offer.status %></span>
        <% if (offer.offer_amount) { %>
        <span class="fw-semibold">Valoare propusa: <%= Number(offer.offer_amount).toFixed(2) %> RON</span>
        <% } else { %>
        <span class="fw-semibold text-muted">Valoarea este in curs de stabilire</span>
        <% } %>
      </div>
      <dl class="row mb-0">
        <dt class="col-sm-4">Valabil pana la</dt>
        <dd class="col-sm-8"><%= offerExpires %></dd>
        <% if (offer.notes) { %>
        <dt class="col-sm-4">Mesaj administrator</dt>
        <dd class="col-sm-8"><%= offer.notes %></dd>
        <% } %>
        <% if (offer.status === 'counter_submitted') { %>
        <dt class="col-sm-4">Contraoferta client</dt>
        <dd class="col-sm-8"><%= Number(offer.counter_amount).toFixed(2) %> RON</dd>
        <% } %>
        <% if (offer.status === 'counter_pending' && counterExpires) { %>
        <dt class="col-sm-4">Contraoferta in asteptare</dt>
        <dd class="col-sm-8">Valabila pana la <%= counterExpires %></dd>
        <% } %>
      </dl>
    </div>

    <% if (['admin', 'superadmin'].includes(currentUser.role)) { %>
    <% if (!offer.offer_amount) { %>
    <div class="glass-card mb-4">
      <h3 class="h6 mb-3">Trimite oferta catre client</h3>
      <form action="/cont/tichete/<%= ticket.id %>/oferta/detalii" method="post" class="row g-3">
        <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
        <div class="col-md-4">
          <label class="form-label" for="offerAmount">Valoare oferta (RON)</label>
          <input class="form-control" type="number" step="0.01" min="0" id="offerAmount" name="amount" required />
        </div>
        <div class="col-md-4">
          <label class="form-label" for="offerExpires">Valabilitate (ore)</label>
          <input class="form-control" type="number" min="<%= offerMinHours %>" id="offerExpires" name="expiresInHours" value="<%= offerMinHours %>" />
          <small class="text-muted">Minim <%= offerMinHours %> ore.</small>
        </div>
        <div class="col-12">
          <label class="form-label" for="offerMessage">Mesaj pentru client</label>
          <textarea class="form-control" id="offerMessage" name="message" rows="2"><%= offer.notes || '' %></textarea>
        </div>
        <div class="col-12 text-end">
          <button class="btn btn-primary" type="submit">Trimite oferta</button>
        </div>
      </form>
    </div>
    <% } else { %>
    <div class="glass-card mb-4">
      <h3 class="h6 mb-3">Detalii oferta transmisa</h3>
      <p class="mb-1">Valoare initiala: <strong><%= Number(offer.offer_amount).toFixed(2) %> RON</strong></p>
      <p class="mb-2">Valabila pana la: <strong><%= offerExpires %></strong></p>
      <% if (offer.notes) { %>
      <p class="mb-2">Mesaj catre client: <%= offer.notes %></p>
      <% } %>
      <div class="alert alert-info mb-0">Valoarea si valabilitatea ofertei nu mai pot fi modificate dupa transmiterea initiala.</div>
    </div>
    <% } %>
    <% if (offer.status === 'counter_submitted') { %>
    <div class="glass-card mb-4">
      <h3 class="h6 mb-3">Raspunde la contraoferta clientului</h3>
      <p class="mb-3">Clientul propune <strong><%= Number(offer.counter_amount).toFixed(2) %> RON</strong>.</p>
      <div class="d-flex flex-column flex-sm-row gap-3">
        <form action="/cont/tichete/<%= ticket.id %>/oferta/contraoferta/accepta" method="post">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
          <button class="btn btn-success" type="submit">Accepta contraoferta</button>
        </form>
        <form action="/cont/tichete/<%= ticket.id %>/oferta/contraoferta/refuza" method="post">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
          <button class="btn btn-outline-danger" type="submit">Refuza contraoferta</button>
        </form>
      </div>
    </div>
    <% } %>
    <% if (offer.status === 'accepted' && ticket.kind !== 'contract') { %>
    <div class="glass-card mb-4">
      <h3 class="h6 mb-3">Porneste semnarea contractului</h3>
      <p class="text-muted">Activeaza formularul pentru ca beneficiarul sa-si completeze datele personale.</p>
      <form action="/cont/tichete/<%= ticket.id %>/oferta/contract" method="post" class="d-flex flex-column flex-sm-row gap-3">
        <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
        <button class="btn btn-primary" type="submit">Activeaza semnarea contractului</button>
      </form>
    </div>
    <% } %>
    <% } %>

    <% if (currentUser.role === 'client') { %>
    <% if (offer.status === 'sent') { %>
    <div class="glass-card mb-4">
      <div class="d-flex flex-column flex-sm-row gap-3">
        <form action="/cont/tichete/<%= ticket.id %>/oferta/accepta" method="post">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
          <button class="btn btn-success" type="submit">Accepta oferta</button>
        </form>
        <form action="/cont/tichete/<%= ticket.id %>/oferta/refuza" method="post">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
          <button class="btn btn-outline-danger" type="submit">Refuza oferta</button>
        </form>
      </div>
    </div>
    <% } %>

    <% if (offer.status === 'counter_pending') { %>
    <div class="glass-card mb-4">
      <h3 class="h6">Trimite contraoferta</h3>
      <p class="text-muted">Completeaza valoarea dorita in maxim 30 de minute pentru a continua negocierea.</p>
      <form action="/cont/tichete/<%= ticket.id %>/oferta/contraoferta" method="post" class="d-flex flex-column flex-sm-row gap-3 align-items-sm-end">
        <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
        <div class="flex-grow-1 w-100">
          <label class="form-label" for="counterAmount">Propune valoare (RON)</label>
          <input class="form-control" type="number" step="0.01" min="0" id="counterAmount" name="amount" required />
        </div>
        <button class="btn btn-outline-primary" type="submit">Trimite contraoferta</button>
      </form>
    </div>
    <% } %>
    <% } %>
    <% const contractStage = contractDetails?.contractStage || 'pending_data'; %>
    <% const contractStageLabels = {
      pending_data: 'Asteptam completarea datelor pentru contract.',
      draft: 'Draftul contractului este generat. Semneaza-l pentru a continua.',
      awaiting_admin: 'Contract semnat de beneficiar. In asteptare semnatura administrator.',
      completed: 'Contract semnat de ambele parti.'
    }; %>
    <% if (ticket.kind === 'contract') { %>
    <div class="glass-card mb-4">
      <h3 class="h6 mb-3">Status contract</h3>
      <p class="mb-2"><%= contractStageLabels[contractStage] || contractStage %></p>
      <% if (contractDetails?.contractNumber) { %>
      <p class="mb-1">Numar contract: <strong><%= contractDetails.contractNumber %></strong></p>
      <% } %>
      <% if (contractDetails?.contractDate) { %>
      <p class="mb-0">Data contract: <strong><%= contractDetails.contractDate.toISOString ? contractDetails.contractDate.toISOString().slice(0, 10) : contractDetails.contractDate %></strong></p>
      <% } %>
    </div>
    <% } %>
    <% if (ticket.project_id) { %>
    <div class="glass-card mb-4">
      <h3 class="h6 mb-2">Proiect asociat</h3>
      <p class="mb-2">Cod proiect: <strong><%= ticket.project_code || ticket.project_id %></strong></p>
      <a class="btn btn-outline-primary" href="/cont/proiecte/<%= ticket.project_id %>">Deschide proiectul</a>
    </div>
    <% } else if (
      ticket.kind === 'contract' &&
      contractStage === 'completed' &&
      ['admin', 'superadmin'].includes(currentUser.role)
    ) { %>
    <div class="glass-card mb-4">
      <h3 class="h6 mb-2">Creeaza proiect din ticket</h3>
      <p class="text-muted mb-3">
        Contractul este finalizat. Poti crea un proiect care preia automat datele colectate.
      </p>
      <form
        action="/cont/tichete/<%= ticket.id %>/proiect"
        method="post"
        onsubmit="return confirm('Actiunea va crea un proiect nou. Continui?');"
      >
        <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
        <button class="btn btn-success" type="submit">Creeaza proiect</button>
      </form>
      <p class="small text-muted mt-2 mb-0">Poate fi creat un singur proiect pentru fiecare ticket.</p>
    </div>
    <% } %>
    <% if (ticket.kind === 'contract' && currentUser.role === 'client') { %>
    <% const contractSigned = ['awaiting_admin', 'completed'].includes(contractStage); %>
    <div class="glass-card mb-4">
      <% if (contractSigned && contractDetails) { %>
      <h3 class="h6 mb-3">Date beneficiar</h3>
      <p class="text-muted"><span class="text-success">🔒</span> Datele furnizate pentru contract sunt salvate in siguranta.</p>
      <dl class="row mb-0">
        <dt class="col-sm-4">Nume complet</dt>
        <dd class="col-sm-8"><%= contractDetails.fullName %></dd>
        <dt class="col-sm-4">Identificat prin</dt>
        <dd class="col-sm-8"><%= contractDetails.idType %></dd>
        <dt class="col-sm-4">Seria / Numar</dt>
        <dd class="col-sm-8"><%= contractDetails.idSeries %> / <%= contractDetails.idNumber %></dd>
        <% if (contractDetails.cnp) { %>
        <dt class="col-sm-4">CNP</dt>
        <dd class="col-sm-8"><%= contractDetails.cnp %></dd>
        <% } %>
        <dt class="col-sm-4">Adresa domiciliu</dt>
        <dd class="col-sm-8"><%= contractDetails.address %></dd>
      </dl>
      <% } else { %>
      <h3 class="h6 mb-3">Completeaza datele pentru contract</h3>
      <p class="text-muted"><span class="text-success">🔒</span> Datele de pe buletin sunt salvate criptat si sunt folosite exclusiv pentru generarea contractului.</p>
      <form action="/cont/tichete/<%= ticket.id %>/contract-date" method="post" class="row g-3">
        <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
        <div class="col-12">
          <label class="form-label" for="contractFullName">Nume complet</label>
          <input class="form-control" type="text" id="contractFullName" name="fullName" value="<%= contractDetails?.fullName || currentUser.fullName || '' %>" required />
        </div>
        <div class="col-md-6">
          <label class="form-label" for="contractIdType">Identificat prin</label>
          <input class="form-control" type="text" id="contractIdType" name="idType" placeholder="ex: CI" value="<%= contractDetails?.idType || '' %>" minlength="2" required />
        </div>
        <div class="col-md-3">
          <label class="form-label" for="contractIdSeries">Seria</label>
          <input class="form-control" type="text" id="contractIdSeries" name="idSeries" value="<%= contractDetails?.idSeries || '' %>" required />
        </div>
        <div class="col-md-3">
          <label class="form-label" for="contractIdNumber">Numar</label>
          <input class="form-control" type="text" id="contractIdNumber" name="idNumber" value="<%= contractDetails?.idNumber || '' %>" required />
        </div>
        <div class="col-md-6">
          <label class="form-label" for="contractCnp">CNP <span class="text-muted">(optional)</span></label>
          <input class="form-control" type="text" id="contractCnp" name="cnp" value="<%= contractDetails?.cnp || '' %>" />
        </div>
        <div class="col-12">
          <label class="form-label" for="contractAddress">Adresa de domiciliu</label>
          <textarea class="form-control" id="contractAddress" name="address" rows="2" required><%= contractDetails?.address || '' %></textarea>
        </div>
        <div class="col-12 text-end">
          <button class="btn btn-success" type="submit">Salveaza datele &amp; Genereaza contractul</button>
        </div>
      </form>
      <% } %>
    </div>
    <% } %>
    <% if (ticket.kind === 'contract' && contractDetails?.contractDraft) { %>
    <div class="glass-card mb-4">
      <h3 class="h6 mb-3">Draft contract</h3>
      <div class="contract-preview">
        <%- contractDetails.contractDraft %>
      </div>
      <% if (['client', 'admin', 'superadmin'].includes(currentUser.role) && contractStage === 'completed') { %>
      <form
        action="/cont/tichete/<%= ticket.id %>/contract/descarca"
        method="post"
        class="mt-3 d-flex flex-column flex-md-row align-items-md-center gap-2"
      >
        <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
        <button class="btn btn-outline-primary" type="submit">Descarca contractul</button>
      </form>
      <p class="text-muted small mt-2 mb-0">Contractul va fi descarcat in format PDF.</p>
      <% } else if (['client', 'admin', 'superadmin'].includes(currentUser.role)) { %>
      <p class="text-muted small mt-3 mb-0">Contractul va fi disponibil pentru descarcare dupa semnarea de catre ambele parti.</p>
      <% } %>
    </div>
    <% } %>
    <% if (ticket.kind === 'contract' && currentUser.role === 'client' && contractStage === 'draft') { %>
    <div class="glass-card mb-4">
      <h3 class="h6 mb-3">Semneaza contractul</h3>
      <p class="text-muted">Semneaza electronic cu degetul sau cu mouse-ul, apoi aplica semnatura pe contract.</p>
      <form action="/cont/tichete/<%= ticket.id %>/contract/semnatura-client" method="post" class="vstack gap-3" data-signature-form>
        <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
        <input type="hidden" name="signatureData" value="" />
        <div class="signature-pad-wrapper" data-signature-pad>
          <canvas></canvas>
        </div>
        <div class="d-flex flex-column flex-sm-row gap-2">
          <button class="btn btn-outline-secondary" type="button" data-signature-clear>Sterge semnatura</button>
          <button class="btn btn-success" type="submit">Aplica pe contract</button>
        </div>
        <p class="text-danger small d-none" data-signature-error>Deseneaza semnatura inainte de a o aplica.</p>
      </form>
    </div>
    <% } %>
    <% if (ticket.kind === 'contract' && ['admin', 'superadmin'].includes(currentUser.role) && contractStage === 'awaiting_admin') { %>
    <div class="glass-card mb-4">
      <h3 class="h6 mb-3">Semneaza contractul ca administrator</h3>
      <p class="text-muted">Aplica semnatura electronica pentru a finaliza contractul si a genera numarul si data.</p>
      <form action="/cont/tichete/<%= ticket.id %>/contract/semnatura-admin" method="post" class="vstack gap-3" data-signature-form>
        <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
        <input type="hidden" name="signatureData" value="" />
        <div class="signature-pad-wrapper" data-signature-pad>
          <canvas></canvas>
        </div>
        <div class="d-flex flex-column flex-sm-row gap-2">
          <button class="btn btn-outline-secondary" type="button" data-signature-clear>Sterge semnatura</button>
          <button class="btn btn-primary" type="submit">Aplica pe contract</button>
        </div>
        <p class="text-danger small d-none" data-signature-error>Deseneaza semnatura inainte de a o aplica.</p>
      </form>
    </div>
    <% } %>
    <% if (['admin', 'superadmin'].includes(currentUser.role) && contractDetails) { %>
    <div class="glass-card mb-4">
      <h3 class="h6 mb-3">Date contract client</h3>
      <p class="text-success mb-3">🔒 Date vizibile doar administratorilor autorizati.</p>
      <dl class="row mb-0">
        <dt class="col-sm-4">Nume complet</dt>
        <dd class="col-sm-8"><%= contractDetails.fullName %></dd>
        <dt class="col-sm-4">Identificat prin</dt>
        <dd class="col-sm-8"><%= contractDetails.idType %></dd>
        <dt class="col-sm-4">Seria / Numar</dt>
        <dd class="col-sm-8"><%= contractDetails.idSeries %> / <%= contractDetails.idNumber %></dd>
        <% if (contractDetails.cnp) { %>
        <dt class="col-sm-4">CNP</dt>
        <dd class="col-sm-8"><%= contractDetails.cnp %></dd>
        <% } %>
        <dt class="col-sm-4">Adresa domiciliu</dt>
        <dd class="col-sm-8"><%= contractDetails.address %></dd>
      </dl>
    </div>
    <% } %>
    <% } %>

    <% function formatTimelineName(name, role) {
      if (!role || role === 'client') {
        return name || 'Autor necunoscut';
      }
      const parts = (name || '').trim().split(/\s+/);
      const firstName = parts[0] || 'Echipa';
      return `${firstName}, Echipa Licente la Cheie`;
    } %>
    <% function formatTimelineDate(value) {
      if (!value) {
        return '—';
      }
      if (value instanceof Date || typeof value?.toISOString === 'function') {
        return value.toISOString().replace('T', ' ').slice(0, 16);
      }
      return value;
    } %>
    <% if (isMergedTicket) { %>
    <div class="glass-card mt-4">
      <p class="mb-0 text-muted">Acest ticket este fuzionat si nu mai accepta raspunsuri noi.</p>
    </div>
    <% } else { %>
    <div class="glass-card mt-4">
      <form action="/cont/tichete/<%= ticket.id %>/raspuns" method="post" class="vstack gap-3">
        <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
        <div>
          <label class="form-label" for="message">Adauga raspuns</label>
          <textarea class="form-control" id="message" name="message" rows="4" required></textarea>
        </div>
        <button class="btn btn-gradient align-self-end" type="submit">Trimite raspuns</button>
      </form>
    </div>
    <% } %>

    <% if (includeInternalTimeline) { %>
    <div class="alert alert-warning mt-4 mb-0">
      <strong>Notificari interne</strong> – aceste inregistrari sunt vizibile doar administratorilor autorizati.
    </div>
    <% } %>
    <div
      class="timeline mt-4"
      data-timeline
      data-ticket-id="<%= ticket.id %>"
      data-offset="<%= timelineEntries.length %>"
      data-limit="<%= timelinePageSize %>"
    >
      <% timelineEntries.forEach((entry) => { %>
      <% const entryType = entry.entry_type; %>
      <% const heading = entryType === 'ticket' ? 'Mesaj initial' : entryType === 'reply' ? 'Raspuns' : 'Notificare interna'; %>
      <% const metaPrefix = entryType === 'ticket' ? 'Creat de' : entryType === 'reply' ? 'Trimis de' : 'Inregistrat de'; %>
      <div class="timeline-item" data-entry-type="<%= entryType %>" data-entry-id="<%= entry.entry_id %>">
        <div class="timeline-content <%= entryType === 'log' ? 'timeline-content--log' : '' %>">
          <div class="d-flex align-items-center gap-2 mb-2">
            <h2 class="h6 mb-0"><%= heading %></h2>
            <% if (entryType === 'log') { %>
            <span class="badge bg-warning text-dark text-uppercase">Intern</span>
            <% } %>
          </div>
          <p class="mb-2 <%= entryType === 'log' ? 'small text-muted' : '' %>">
            <% const messageLines = String(entry.message || '').split('\n'); %>
            <% messageLines.forEach((line, index) => { %>
            <%= line %><% if (index < messageLines.length - 1) { %><br /><% } %>
            <% }) %>
          </p>
          <small class="text-muted d-block">
            <%= metaPrefix %> <%= formatTimelineName(entry.author_name, entry.author_role) %>
            <% if (entryType === 'log') { %> • Vizibil administratorilor<% } %>
            <% if (entry.created_at) { %> • <%= formatTimelineDate(entry.created_at) %><% } %>
          </small>
        </div>
      </div>
      <% }) %>
    </div>
    <% if (hasMoreTimeline) { %>
    <div class="text-center mt-3">
      <button class="btn btn-outline-primary" type="button" data-timeline-load>Vezi mai mult</button>
    </div>
    <% } %>

    <% if (['admin', 'superadmin'].includes(currentUser.role) && !isMergedTicket) { %>
    <div class="glass-card mt-4">
      <h3 class="h6 mb-3">Fuzioneaza tickete</h3>
      <% if (mergeCandidates && mergeCandidates.length > 0) { %>
      <form action="/cont/tichete/<%= ticket.id %>/merge" method="post" class="vstack gap-3">
        <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
        <div class="vstack gap-2">
          <% const mergeKindLabels = { support: 'suport', offer: 'oferta', contract: 'contract' }; %>
          <% mergeCandidates.forEach((candidate) => { %>
          <% const candidateStatusLabel = candidate.status === 'rezolvat' && candidate.merged_into_ticket_id ? 'rezolvat (merged)' : candidate.status; %>
          <div class="form-check">
            <input class="form-check-input" type="checkbox" id="mergeTicket<%= candidate.id %>" name="ticketIds" value="<%= candidate.id %>" />
            <label class="form-check-label" for="mergeTicket<%= candidate.id %>">
              <span class="fw-semibold d-block"><%= candidate.subject %></span>
              <span class="text-muted small">#<%= candidate.display_code %> • Tip: <%= mergeKindLabels[candidate.kind] || candidate.kind %> • Status: <%= candidateStatusLabel %></span>
            </label>
          </div>
          <% }) %>
        </div>
        <div class="d-flex flex-column flex-sm-row gap-2 align-items-sm-center">
          <button class="btn btn-outline-danger" type="submit">Fuzioneaza selectia in acest ticket</button>
          <p class="text-muted small mb-0">Ticketele selectate vor fi inchise cu mentiunea „merged”.</p>
        </div>
      </form>
      <% } else { %>
      <p class="text-muted mb-0">Nu exista alte tickete eligibile pentru merge.</p>
      <% } %>
    </div>
    <% } %>
    <% if (['admin', 'superadmin'].includes(currentUser.role)) { %>
    <div class="glass-card mt-4">
      <% if (isMergedTicket) { %>
      <p class="mb-0 text-muted">Ticketul este fuzionat in altul si statusul nu poate fi modificat.</p>
      <% } else { %>
      <form action="/cont/tichete/<%= ticket.id %>/status" method="post" class="d-flex flex-column flex-sm-row gap-3 align-items-sm-end">
        <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
        <div class="flex-grow-1 w-100">
          <label class="form-label" for="status">Actualizeaza statusul</label>
          <select class="form-select" id="status" name="status">
            <option value="deschis" <%= ticket.status === 'deschis' ? 'selected' : '' %>>Deschis</option>
            <option value="in-analiza" <%= ticket.status === 'in-analiza' ? 'selected' : '' %>>In analiza</option>
            <option value="rezolvat" <%= ticket.status === 'rezolvat' ? 'selected' : '' %>>Rezolvat</option>
          </select>
        </div>
        <button class="btn btn-outline-primary" type="submit">Salveaza</button>
      </form>
      <% } %>
    </div>
    <% } %>
  </div>
</section>
<script>
  (function () {
    const forms = document.querySelectorAll('[data-signature-form]');
    forms.forEach((form) => {
      const canvas = form.querySelector('canvas');
      const pad = form.querySelector('[data-signature-pad]');
      const ctx = canvas.getContext('2d');
      const hiddenInput = form.querySelector('input[name="signatureData"]');
      const clearButton = form.querySelector('[data-signature-clear]');
      const errorMessage = form.querySelector('[data-signature-error]');
      let drawing = false;
      let hasSignature = false;
      let pixelRatio = window.devicePixelRatio || 1;

      function resizeCanvas() {
        pixelRatio = window.devicePixelRatio || 1;
        const width = pad.clientWidth;
        const height = 180;
        canvas.width = width * pixelRatio;
        canvas.height = height * pixelRatio;
        canvas.style.width = width + 'px';
        canvas.style.height = height + 'px';
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        if (!hasSignature) {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
        }
        ctx.scale(pixelRatio, pixelRatio);
        ctx.lineWidth = 2;
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
      }

      function getPosition(event) {
        const rect = canvas.getBoundingClientRect();
        return {
          x: event.clientX - rect.left,
          y: event.clientY - rect.top
        };
      }

      function startDrawing(event) {
        if (event.pointerType === 'mouse' && event.buttons !== 1) {
          return;
        }
        if (errorMessage) {
          errorMessage.classList.add('d-none');
        }
        drawing = true;
        hasSignature = true;
        ctx.beginPath();
        const pos = getPosition(event);
        ctx.moveTo(pos.x, pos.y);
        if (canvas.setPointerCapture) {
          canvas.setPointerCapture(event.pointerId);
        }
      }

      function draw(event) {
        if (!drawing) {
          return;
        }
        const pos = getPosition(event);
        ctx.lineTo(pos.x, pos.y);
        ctx.stroke();
      }

      function endDrawing(event) {
        if (!drawing) {
          return;
        }
        draw(event);
        drawing = false;
        if (canvas.releasePointerCapture) {
          try {
            canvas.releasePointerCapture(event.pointerId);
          } catch (err) {
            /* ignore release errors */
          }
        }
      }

      function clearCanvas() {
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        resizeCanvas();
        hasSignature = false;
        if (hiddenInput) {
          hiddenInput.value = '';
        }
        if (errorMessage) {
          errorMessage.classList.add('d-none');
        }
      }

      resizeCanvas();
      window.addEventListener('resize', resizeCanvas);
      canvas.addEventListener('pointerdown', startDrawing);
      canvas.addEventListener('pointermove', draw);
      canvas.addEventListener('pointerup', endDrawing);
      canvas.addEventListener('pointercancel', endDrawing);

      if (clearButton) {
        clearButton.addEventListener('click', (event) => {
          event.preventDefault();
          clearCanvas();
        });
      }

      form.addEventListener('submit', (event) => {
        if (!hasSignature) {
          event.preventDefault();
          if (errorMessage) {
            errorMessage.classList.remove('d-none');
          }
          return;
        }
        if (hiddenInput) {
          hiddenInput.value = canvas.toDataURL('image/png');
        }
      });
    });

    const timeline = document.querySelector('[data-timeline]');
    if (timeline) {
      const loadMoreButton = document.querySelector('[data-timeline-load]');
      const ticketId = timeline.getAttribute('data-ticket-id');
      const limit = Number(timeline.getAttribute('data-limit') || '10');
      let offset = Number(timeline.getAttribute('data-offset') || '0');

      function formatTimelineNameClient(name, role) {
        if (!role || role === 'client') {
          return name || 'Autor necunoscut';
        }
        const parts = (name || '').trim().split(/\s+/);
        const firstName = parts[0] || 'Echipa';
        return `${firstName}, Echipa Licente la Cheie`;
      }

      function createMessageParagraph(message) {
        const paragraph = document.createElement('p');
        const lines = `${message ?? ''}`.split(/\n/);
        lines.forEach((line, index) => {
          if (index > 0) {
            paragraph.appendChild(document.createElement('br'));
          }
          paragraph.appendChild(document.createTextNode(line));
        });
        return paragraph;
      }

      function formatTimelineDateClient(value) {
        if (!value) {
          return null;
        }
        const dateInstance = value instanceof Date ? value : new Date(value);
        if (Number.isNaN(dateInstance.getTime())) {
          return null;
        }
        const iso = dateInstance.toISOString();
        return `${iso.slice(0, 10)} ${iso.slice(11, 16)}`;
      }

      function renderTimelineEntry(entry) {
        const item = document.createElement('div');
        const entryType = entry.entry_type;
        item.className = 'timeline-item';
        item.setAttribute('data-entry-type', entryType);
        item.setAttribute('data-entry-id', entry.entry_id);

        const content = document.createElement('div');
        content.className = 'timeline-content';
        if (entryType === 'log') {
          content.classList.add('timeline-content--log');
        }
        item.appendChild(content);

        const headingWrapper = document.createElement('div');
        headingWrapper.className = 'd-flex align-items-center gap-2 mb-2';
        const title = document.createElement('h2');
        title.className = 'h6 mb-0';
        title.textContent = entryType === 'ticket' ? 'Mesaj initial' : entryType === 'reply' ? 'Raspuns' : 'Notificare interna';
        headingWrapper.appendChild(title);
        if (entryType === 'log') {
          const badge = document.createElement('span');
          badge.className = 'badge bg-warning text-dark text-uppercase';
          badge.textContent = 'Intern';
          headingWrapper.appendChild(badge);
        }
        content.appendChild(headingWrapper);

        const paragraph = createMessageParagraph(entry.message);
        paragraph.classList.add('mb-2');
        if (entryType === 'log') {
          paragraph.classList.add('small', 'text-muted');
        }
        content.appendChild(paragraph);

        const meta = document.createElement('small');
        meta.className = 'text-muted d-block';
        const prefix =
          entryType === 'ticket' ? 'Creat de ' : entryType === 'reply' ? 'Trimis de ' : 'Inregistrat de ';
        let metaText = `${prefix}${formatTimelineNameClient(entry.author_name, entry.author_role)}`;
        if (entryType === 'log') {
          metaText += ' • Vizibil administratorilor';
        }
        const formattedDate = formatTimelineDateClient(entry.created_at);
        if (formattedDate) {
          metaText += ` • ${formattedDate}`;
        }
        meta.textContent = metaText;
        content.appendChild(meta);

        return item;
      }

      if (loadMoreButton) {
        loadMoreButton.addEventListener('click', async () => {
          loadMoreButton.disabled = true;
          const originalText = loadMoreButton.textContent;
          loadMoreButton.textContent = 'Se incarca...';
          try {
            const response = await fetch(
              `/cont/tichete/${ticketId}/timeline?offset=${offset}&limit=${limit}`,
              {
                headers: {
                  Accept: 'application/json'
                }
              }
            );

            if (!response.ok) {
              throw new Error('Network response was not ok');
            }

            const data = await response.json();
            if (Array.isArray(data.entries)) {
              data.entries.forEach((entry) => {
                timeline.appendChild(renderTimelineEntry(entry));
              });
            }

            if (typeof data.nextOffset === 'number') {
              offset = data.nextOffset;
            } else if (Array.isArray(data.entries)) {
              offset += data.entries.length;
            }
            timeline.setAttribute('data-offset', String(offset));

            if (!data.hasMore) {
              loadMoreButton.remove();
            } else {
              loadMoreButton.disabled = false;
              loadMoreButton.textContent = originalText;
            }
          } catch (error) {
            loadMoreButton.disabled = false;
            loadMoreButton.textContent = originalText;
            window.alert('Nu am putut incarca mesaje suplimentare. Incearca din nou.');
          }
        });
      }
    }
  })();
</script>
<%- include('../partials/footer') %>
