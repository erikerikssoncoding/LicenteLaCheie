<%- include('../partials/head', { title, description, request }) %>
<%- include('../partials/header') %>
<section class="py-5 py-lg-6">
  <div class="container" style="max-width: 1000px;">
    <% const statusLabel = currentStatusInfo?.label || project.status; %>
    <% const statusMessage = currentStatusInfo?.clientMessage || currentStatusInfo?.description || '' %>
    <% const flowIndex = projectStatusFlow.findIndex((status) => status.id === project.status); %>
    <% const safeFlowIndex = flowIndex === -1 ? null : flowIndex; %>
    <% const deadlineLabel = project.deadline
      ? project.deadline.toISOString
        ? project.deadline.toISOString().slice(0, 10)
        : project.deadline
      : 'N/A'; %>
    <% if (projectFeedback && projectFeedback.success) { %>
    <div class="alert alert-success mb-4" role="alert"><%= projectFeedback.success %></div>
    <% } %>
    <% if (projectFeedback && projectFeedback.error) { %>
    <div class="alert alert-danger mb-4" role="alert"><%= projectFeedback.error %></div>
    <% } %>
    <div class="card shadow-sm mb-4">
      <div class="card-body">
        <div class="d-flex flex-column flex-lg-row justify-content-between align-items-lg-center gap-3">
          <div>
            <div class="d-flex flex-wrap gap-2 align-items-center mb-2">
              <h1 class="h4 mb-0"><%= project.title %></h1>
              <span class="badge bg-dark-subtle text-dark">Cod: <%= project.project_code %></span>
            </div>
            <div class="d-flex flex-wrap gap-2 align-items-center mb-3">
              <span class="badge bg-primary-subtle text-primary-emphasis text-uppercase">
                <%= statusLabel %>
              </span>
              <% if (statusMessage) { %>
              <span class="text-muted small"><%= statusMessage %></span>
              <% } %>
            </div>
            <ul class="list-unstyled text-muted small mb-0">
              <li><strong>Nivel studii:</strong> <%= project.degree_level %></li>
              <li><strong>Deadline:</strong> <%= deadlineLabel %></li>
              <% if (project.admin_name) { %>
              <li><strong>Admin responsabil:</strong> <%= project.admin_name %></li>
              <% } %>
              <% if (project.redactor_name) { %>
              <li><strong>Redactor asignat:</strong> <%= project.redactor_name %></li>
              <% } %>
              <li><strong>Client:</strong> <%= project.client_name %> &bull; <%= project.client_email %></li>
            </ul>
          </div>
        </div>
        <% if (project.progress_notes) { %>
        <div class="alert alert-info mt-3 mb-0">
          <strong>Nota recenta:</strong> <%= project.progress_notes %>
        </div>
        <% } %>
      </div>
    </div>

    <div class="row g-4 mb-4">
      <div class="col-lg-6">
        <div class="card h-100 shadow-sm">
          <div class="card-body">
            <h2 class="h5 mb-3">Fazele proiectului</h2>
            <ul class="list-group list-group-flush">
              <% projectStatusFlow.forEach((status, index) => { %>
              <% const isCurrent = safeFlowIndex === index; %>
              <% const isCompleted = safeFlowIndex !== null && index < safeFlowIndex; %>
              <li class="list-group-item">
                <div class="d-flex flex-column">
                  <div class="d-flex align-items-center gap-2">
                    <% if (isCurrent) { %>
                    <span class="badge bg-primary">Curent</span>
                    <% } else if (isCompleted) { %>
                    <span class="badge bg-success">Finalizat</span>
                    <% } else { %>
                    <span class="badge bg-secondary">In asteptare</span>
                    <% } %>
                    <span class="fw-semibold"><%= status.label %></span>
                  </div>
                  <% if (status.clientMessage) { %>
                  <span class="small text-muted mt-1"><%= status.clientMessage %></span>
                  <% } %>
                </div>
              </li>
              <% }); %>
            </ul>
          </div>
        </div>
      </div>
      <div class="col-lg-6">
        <div class="card h-100 shadow-sm">
          <div class="card-body">
            <h2 class="h5 mb-3">Descriere proiect</h2>
            <div class="bg-body-tertiary rounded-3 p-3" style="white-space: pre-wrap;">
              <%= project.description %>
            </div>
          </div>
        </div>
      </div>
    </div>

    <% if (['admin', 'superadmin'].includes(currentUser.role)) { %>
    <div class="card shadow-sm mb-4">
      <div class="card-body">
        <h2 class="h5 mb-3">Alocare echipa</h2>
        <form action="/cont/proiecte/<%= project.id %>/alocare" method="post" class="row g-3">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
          <div class="col-md-6">
            <label class="form-label" for="adminId">Admin responsabil</label>
            <select class="form-select" id="adminId" name="adminId">
              <option value="">-- selecteaza --</option>
              <% team
                .filter((member) => member.role === 'admin' || member.role === 'superadmin')
                .forEach((member) => { %>
              <option value="<%= member.id %>" <%= project.assigned_admin_id === member.id ? 'selected' : '' %>>
                <%= member.full_name %> (<%= member.email %>)
              </option>
              <% }); %>
            </select>
          </div>
          <div class="col-md-6">
            <label class="form-label" for="redactorId">Redactor asignat</label>
            <select class="form-select" id="redactorId" name="redactorId">
              <option value="">-- selecteaza --</option>
              <% team.filter((member) => member.role === 'redactor').forEach((member) => { %>
              <option value="<%= member.id %>" <%= project.assigned_editor_id === member.id ? 'selected' : '' %>>
                <%= member.full_name %> (<%= member.email %>)
              </option>
              <% }); %>
            </select>
          </div>
          <div class="col-12 text-end">
            <button class="btn btn-outline-primary" type="submit">Actualizeaza echipa</button>
          </div>
        </form>
      </div>
    </div>
    <% } %>

    <% const canAdvance = ['admin', 'superadmin', 'redactor'].includes(currentUser.role) && nextStatus; %>
    <% const canRevert = currentUser.role === 'superadmin' && previousStatus; %>
    <% if (canAdvance || canRevert) { %>
    <div class="card shadow-sm mb-4">
      <div class="card-body">
        <h2 class="h5 mb-3">Gestionare etape</h2>
        <% if (canAdvance) { %>
        <form action="/cont/proiecte/<%= project.id %>/status" method="post" class="vstack gap-2 mb-4">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
          <input type="hidden" name="action" value="advance" />
          <label class="form-label" for="advanceNotes">Note pentru etapa urmatoare <span class="text-muted">(optional)</span></label>
          <textarea
            class="form-control"
            id="advanceNotes"
            name="notes"
            rows="2"
            placeholder="Mesaj pentru echipa in momentul avansarii"
          ></textarea>
          <button class="btn btn-primary align-self-start" type="submit">
            Treci la etapa urmatoare: <%= nextStatusInfo?.label || nextStatus %>
          </button>
          <p class="small text-muted mb-0">
            Actiunea este ireversibila pentru rolurile obisnuite. Doar superadministratorii pot reveni la etapa anterioara.
          </p>
        </form>
        <% } %>
        <% if (canRevert) { %>
        <form action="/cont/proiecte/<%= project.id %>/status" method="post" class="d-inline">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
          <input type="hidden" name="action" value="previous" />
          <button class="btn btn-outline-danger" type="submit">
            Revino la etapa anterioara: <%= previousStatusInfo?.label || previousStatus %>
          </button>
        </form>
        <% } %>
      </div>
    </div>
    <% } %>

    <div class="card shadow-sm mb-4">
      <div class="card-body">
        <h2 class="h5 mb-3">Timeline proiect</h2>
        <% if (['admin', 'superadmin', 'redactor', 'client'].includes(currentUser.role)) { %>
        <form action="/cont/proiecte/<%= project.id %>/mesaj" method="post" class="vstack gap-3 mb-4">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>" />
          <div>
            <label class="form-label" for="projectMessage">Scrie un mesaj</label>
            <textarea class="form-control" id="projectMessage" name="message" rows="3" required></textarea>
          </div>
          <button class="btn btn-gradient align-self-end" type="submit">Trimite mesaj</button>
        </form>
        <% } %>
        <div
          class="timeline"
          data-project-timeline
          data-project-id="<%= project.id %>"
          data-offset="<%= timelineEntries.length %>"
          data-limit="<%= timelinePageSize %>"
        >
          <% timelineEntries.forEach((entry) => { %>
          <% const entryType = entry.entry_type; %>
          <% const statusInfoEntry = entry.status ? projectStatusMap[entry.status] : null; %>
          <div class="timeline-item" data-entry-type="<%= entryType %>" data-entry-id="<%= entry.id %>">
            <div class="timeline-content <%= entryType === 'status' ? 'timeline-content--status' : '' %>">
              <div class="d-flex align-items-center gap-2 mb-2">
                <h3 class="h6 mb-0">
                  <%= entryType === 'status' ? 'Actualizare status' : 'Mesaj' %>
                </h3>
                <% if (entryType === 'status' && statusInfoEntry) { %>
                <span class="badge bg-info text-dark text-uppercase"><%= statusInfoEntry.label %></span>
                <% } %>
                <% if (entry.visibility === 'internal') { %>
                <span class="badge bg-warning text-dark text-uppercase">Intern</span>
                <% } %>
              </div>
              <p class="mb-2 <%= entryType === 'status' ? '' : '' %>">
                <% const lines = String(entry.message || '').split('\n'); %>
                <% lines.forEach((line, index) => { %>
                <%= line %><% if (index < lines.length - 1) { %><br /><% } %>
                <% }); %>
              </p>
              <small class="text-muted d-block">
                <% const authorName = entry.author_name || (entryType === 'status' ? 'Sistem' : 'Utilizator necunoscut'); %>
                <% const authorRole = entry.author_role ? entry.author_role : entryType === 'status' ? 'system' : null; %>
                <% const formattedDate = entry.created_at
                  ? (entry.created_at.toISOString
                      ? entry.created_at.toISOString().replace('T', ' ').slice(0, 16)
                      : entry.created_at)
                  : null; %>
                <%= entryType === 'status' ? 'Actualizat de' : 'Mesaj de' %>
                <%= authorRole && authorRole !== 'client' ? `${authorName} (${authorRole})` : authorName %>
                <% if (formattedDate) { %> • <%= formattedDate %><% } %>
              </small>
            </div>
          </div>
          <% }); %>
        </div>
        <% if (hasMoreTimeline) { %>
        <div class="text-center mt-3">
          <button class="btn btn-outline-primary" type="button" data-project-timeline-load>Vezi mai mult</button>
        </div>
        <% } %>
      </div>
    </div>
  </div>
</section>
<script>
  const statusDictionary = <%- JSON.stringify(projectStatusMap) %>;
  (function () {
    const timeline = document.querySelector('[data-project-timeline]');
    if (!timeline) {
      return;
    }
    const loadMoreButton = document.querySelector('[data-project-timeline-load]');
    const projectId = timeline.getAttribute('data-project-id');
    let offset = Number(timeline.getAttribute('data-offset') || '0');
    const limit = Number(timeline.getAttribute('data-limit') || '10');

    function formatDate(value) {
      if (!value) {
        return null;
      }
      const dateInstance = value instanceof Date ? value : new Date(value);
      if (Number.isNaN(dateInstance.getTime())) {
        return null;
      }
      const iso = dateInstance.toISOString();
      return `${iso.slice(0, 10)} ${iso.slice(11, 16)}`;
    }

    function formatName(name, role) {
      if (!role || role === 'client') {
        return name || 'Autor necunoscut';
      }
      return `${name || 'Echipa'} (${role})`;
    }

    function renderEntry(entry) {
      const item = document.createElement('div');
      item.className = 'timeline-item';
      item.setAttribute('data-entry-type', entry.entry_type);
      item.setAttribute('data-entry-id', entry.id);

      const content = document.createElement('div');
      content.className = 'timeline-content';
      if (entry.entry_type === 'status') {
        content.classList.add('timeline-content--status');
      }
      item.appendChild(content);

      const header = document.createElement('div');
      header.className = 'd-flex align-items-center gap-2 mb-2';
      const heading = document.createElement('h3');
      heading.className = 'h6 mb-0';
      heading.textContent = entry.entry_type === 'status' ? 'Actualizare status' : 'Mesaj';
      header.appendChild(heading);
      if (entry.entry_type === 'status' && entry.status) {
        const badge = document.createElement('span');
        badge.className = 'badge bg-info text-dark text-uppercase';
        badge.textContent = statusDictionary[entry.status]?.label || entry.status;
        header.appendChild(badge);
      }
      if (entry.visibility === 'internal') {
        const badge = document.createElement('span');
        badge.className = 'badge bg-warning text-dark text-uppercase';
        badge.textContent = 'Intern';
        header.appendChild(badge);
      }
      content.appendChild(header);

      const paragraph = document.createElement('p');
      paragraph.className = 'mb-2';
      const message = String(entry.message || '');
      message.split('\n').forEach((line, index, array) => {
        paragraph.appendChild(document.createTextNode(line));
        if (index < array.length - 1) {
          paragraph.appendChild(document.createElement('br'));
        }
      });
      content.appendChild(paragraph);

      const meta = document.createElement('small');
      meta.className = 'text-muted d-block';
      const author = formatName(entry.author_name, entry.author_role);
      const prefix = entry.entry_type === 'status' ? 'Actualizat de' : 'Mesaj de';
      let metaText = `${prefix} ${author}`;
      if (entry.visibility === 'internal') {
        metaText += ' • Vizibil echipei interne';
      }
      const formatted = formatDate(entry.created_at);
      if (formatted) {
        metaText += ` • ${formatted}`;
      }
      meta.textContent = metaText;
      content.appendChild(meta);

      return item;
    }

    if (loadMoreButton) {
      loadMoreButton.addEventListener('click', async () => {
        loadMoreButton.disabled = true;
        const originalText = loadMoreButton.textContent;
        loadMoreButton.textContent = 'Se incarca...';
        try {
          const response = await fetch(
            `/cont/proiecte/${projectId}/timeline?offset=${offset}&limit=${limit}`,
            {
              headers: {
                Accept: 'application/json'
              }
            }
          );
          if (!response.ok) {
            throw new Error('Network error');
          }
          const data = await response.json();
          if (Array.isArray(data.entries)) {
            data.entries.forEach((entry) => {
              timeline.appendChild(renderEntry(entry));
            });
          }
          if (typeof data.nextOffset === 'number') {
            offset = data.nextOffset;
          } else if (Array.isArray(data.entries)) {
            offset += data.entries.length;
          }
          timeline.setAttribute('data-offset', String(offset));
          if (!data.hasMore) {
            loadMoreButton.remove();
          } else {
            loadMoreButton.disabled = false;
            loadMoreButton.textContent = originalText;
          }
        } catch (error) {
          loadMoreButton.disabled = false;
          loadMoreButton.textContent = originalText;
          window.alert('Nu am putut incarca mesaje suplimentare. Incearca din nou.');
        }
      });
    }
  })();
</script>
<%- include('../partials/footer') %>
